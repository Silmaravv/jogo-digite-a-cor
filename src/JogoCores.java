import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class JogoCores {
	
	public static final String ANSI_RESET = "\u001B[0m";
	public static final String ANSI_BLACK = "\u001B[30m";
	public static final String ANSI_RED = "\u001B[31m";
	public static final String ANSI_GREEN = "\u001B[32m";
	public static final String ANSI_YELLOW = "\u001B[33m";
	public static final String ANSI_BLUE = "\u001B[34m";
	public static final String ANSI_PURPLE = "\u001B[35m";
	public static final String ANSI_CYAN = "\u001B[36m";
	public static final String ANSI_WHITE = "\u001B[37m";
	
	
	public static void main(String[] args) throws InterruptedException {
		ArrayList<Jogador> ranking = new ArrayList<>();
		//
		boolean continuar = true;
		while (continuar) {
			System.out.println("");
			System.out.println("");
			System.out.println("BEM VINDO(A) AO JOGO \u001B[33m‚ö°cÃ∂Õ¢ÕõhÃ∂Õ¢ÕõoÃ∂Õ¢ÕõqÃ∂Õ¢ÕõuÃ∂Õ¢ÕõeÃ∂Õ¢Õõ\u001B[36m Ã∂Õ¢ÕõdÃ∂Õ¢ÕõeÃ∂Õ¢Õõ \u001B[37mcÃ∂Õ¢Õõ\u001B[35moÃ∂Õ¢Õõ\u001B[32mrÃ∂Õ¢Õõ\u001B[37meÃ∂Õ¢Õõ\u001B[36msÃ∂Õ¢ÕõÃ∂Õ¢ÕõÃ∂Õ¢Õõ \u001B[33m‚ö°\u001B[0m");
			System.out.println("");
			System.out.println("Escolha a op√ß√£o desejada:\n" );
			System.out.println("\u001B[36m1- INICIAR üèÅ\u001B[0m");
			System.out.println("\u001B[33m2- RANKING üéØ \u001B[0m");
			System.out.println("\u001B[32m3- INSTRU√á√ïES üïπÔ∏è\u001B[0m");
			System.out.println("\u001B[31m4- SAIR üö™\u001B[0m");
			System.out.println("");
			
			
			Scanner ler = new Scanner(System.in);
			byte escolha = ler.nextByte();
			
			if (escolha == 1) {
				System.out.println("JOGO INICIADO!");
				System.out.println("");
				System.out.println(" \nSer√° que voc√™ consegue bater o record?");
				Random gerador = new Random();
	  		
				boolean acertou = true;
				int pontoSoma = 0;
				int tempoLimite = 10000;
			
				
				while (acertou) {
					System.out.println();
					System.out.println("Digite a cor da palavra o mais r√°pido poss√≠vel.");
					System.out.println();
	  		//para que o sistema entenda qual √© a cor, sorteamos as cores para pintar a palavra e guarda a posi√ß√£o, pois ser√° usada para compara√ß√£o.
					String[] palavras = {"azul", "vermelho", "amarelo", "verde", "roxo", "ciano", "branco"};
					String[] coresSorteio = {ANSI_BLUE, ANSI_RED, ANSI_YELLOW, ANSI_GREEN, ANSI_PURPLE, ANSI_CYAN, ANSI_WHITE};
	  			
					int posicaoCorPintada = gerador.nextInt(0, coresSorteio.length);
					String corSorteadaPintada = coresSorteio[posicaoCorPintada];
					String palavraSorteada = palavras[gerador.nextInt(0, palavras.length)];
	  			
					System.out.println(corSorteadaPintada + palavraSorteada);
					System.out.println(ANSI_RESET);
					//uma solu√ß√£o para o temporizador, o scanner trava o terminal e n√£o d√° pra interromper a trava do terminal usando recursos normais
					//o console imput vai esperar o usuario digitar alguma coisa dentro de um limite de tempo, se acabar o tempo ele avan√ßa o cod
					ConsoleInput consoleInput = new ConsoleInput(1,tempoLimite, TimeUnit.MILLISECONDS);
					String cor = consoleInput.readLine();
					
					//        roxo √© igual a roxo? se a pessoa n√£o digitar dentro do tempo ser√° null
					acertou = cor != null && cor.equals(palavras[posicaoCorPintada]);
	  			
					if (acertou) {
						System.out.println("Acertou miseravi");
						pontoSoma = pontoSoma + 1;
						System.out.println("N√≠vel "+ pontoSoma);
						
						if (tempoLimite >= 2650) {
							tempoLimite = tempoLimite-500;
							
								
						}
						
						
					}
					else {
						System.out.println("‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°¥‚†ã‚†â‚°ä‚¢Å‚†Ä‚†Ä‚¢¨‚†Ä‚†â‚†ã‚†à‚†•‚†§‚¢ç‚°õ‚†í‚†∂‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†•‚†Ä‚†Ä‚†ä‚¢≠‚£æ‚£ø‚£∑‚°§‚†Ä‚£†‚°Ä‚°Ö‚¢†‚£∂‚£Æ‚£Ñ‚†â‚†¢‚†ô‚°Ü‚†Ä‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚£†‚°æ‚£Å‚°®‚†¥‚†¢‚°§‚£ø‚£ø‚£ø‚£ø‚£ø‚†∏‚°∑‚†ô‚£ü‚†ª‚£Ø‚£ø‚£ü‚£É‚£†‚°Å‚¢∑‚£Ñ‚†Ä\r\n"
								+ "‚†Ä‚°º‚°ô‚£ú‚°ï‚†ª‚£∑‚£¶‚°Ä‚¢ô‚†ù‚†õ‚°´‚¢µ‚†í‚£Ä‚°Ä‚†≥‚°≤‚¢Ñ‚£Ä‚¢∞‚£´‚£∂‚°á‚°Ç‚†ô‚°á\r\n"
								+ "‚¢∏‚°Ö‚°á‚†à‚†Ä‚†Ä‚†π‚£ø‚£ø‚£∑‚£∑‚£æ‚£Ñ‚£Ä‚£¨‚£©‚£∑‚†∂‚†ß‚£∂‚£æ‚£ø‚£ø‚£ø‚°∑‚†Å‚£á‚°á\r\n"
								+ "‚†Ä‚†≥‚£Ö‚¢Ä‚¢¢‚†°‚†Ä‚°ú‚¢ø‚£ø‚£ø‚°è‚†ë‚°¥‚†ô‚£§‚†ä‚†ë‚°¥‚†Å‚¢ª‚£ø‚£ø‚£ø‚†á‚¢Ä‚°û‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†ò‚¢Ø‚†Ä‚°Ü‚†Ä‚†ê‚°®‚°ª‚£ø‚£ß‚£§‚£á‚£Ä‚£ß‚£Ä‚£Ä‚£∑‚£†‚£º‚£ø‚£ø‚£ø‚†Ä‚¢ø‚†Ä‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚°ê‚°Ñ‚†Ä‚†ê‚¢å‚†™‚°ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚¢∏‚†Ä‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢æ‚£Ü‚††‚†Ä‚°Å‚†ò‚¢å‚†ª‚£ø‚£ø‚†ª‚†π‚†Å‚¢É‚¢π‚£ø‚£ø‚£ø‚°á‚°ò‚°á‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†∑‚¢¥‚£Ñ‚†Ä‚¢≠‚°ä‚†õ‚†ø‚†ø‚†µ‚†Ø‚°≠‚†Ω‚£õ‚†ü‚¢°‚†É‚°á‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†≤‚†¨‚£•‚£Ä‚°Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚£†‚°≤‚¢Ñ‚°º‚†É‚†Ä\r\n"
								+ "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ô‚†ì‚†í‚†í‚†í‚†ã‚†â‚†Ä‚†Ä‚†Ä");
						System.out.println("Ruim demais, tente novamente. \n voc√™ fez " + pontoSoma + " pontos");
						
						
					}
				
				}
				// colocar no rank
				System.out.println("Par√ßa, informe seu nome e veja o ranking:");
				String nome = ler.next();
				
				
				ranking.add(new Jogador(nome,pontoSoma));
				mostrarRanking(ranking);
				System.out.println("‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÑ‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñà‚ñà‚ñÑ‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñÑ‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñë‚ñà‚ñÄ‚ñÑ‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñà‚ñÑ‚ñÑ‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñë‚ñà‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñê‚ñå‚ñë‚ñë‚ñà‚ñÄ‚ñÄ‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÄ‚ñë‚ñë‚ñà‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñê‚ñå‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñÑ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñê‚ñå‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñå‚ñë\r\n"
						+ "‚ñë‚ñë‚ñê‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñå‚ñë\r\n"
						+ "‚ñë‚ñë‚ñê‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñå‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñà‚ñÑ‚ñë‚ñë‚ñÑ‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñå‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñê‚ñå‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñå‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñê‚ñå‚ñÄ‚ñÑ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñê‚ñå‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñë‚ñë‚ñÄ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñÄ‚ñë‚ñë‚ñë\r\n"
						+ "‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë");
				
				
          	} else if(escolha ==2) { 
          		System.out.println("Acompanhe as √∫ltimas pontua√ß√µes, e supere a cada jogo:"
          				+"RANKING ATUAL"
          				);
          		
          		
          		mostrarRanking(ranking);
          		
          	} else if (escolha ==3) {
          		System.out.println("\u001B[33müÖ∏\u001B[34müÖΩ\u001B[35müÜÇ\u001B[36müÜÉ\u001B[31müÜÅ\u001B[33müÜÑ\u001B[34müÖ≤\u001B[31müÖæ\u001B[36müÖ¥\u001B[33müÜÇ\u001B[32m üÖ≥\u001B[35müÖæ\u001B[36m üÖπ\u001B[31müÖæ\u001B[33müÖ∂\u001B[35müÖæ\u001B[0m\n");
          		System.out.println("1 - Ao iniciar o jogo, ser√° apresentada o nome de uma cor.\n2- Digite a cor correspondente √† palavra exibida.\n\n Observa√ß√µes:\n *A cada resposta correta, o desafio aumenta, reduzindo o tempo dispon√≠vel em 2 segundos a cada rodada.\n *Ao final registre o seu nome e confira sua pontua√ß√£o.");
          	} else if(escolha ==4){
          		System.exit(0);
          	}
	    }
	
	}
	
	public static void mostrarRanking(ArrayList<Jogador> ranking) {
		
		
		for (int posicao = 0;ranking.size() > posicao; ++posicao){
  			Jogador jogador = ranking.get(posicao);
  			String nome = jogador.nome;
  			int pontos = jogador.pontuacao;
  			System.out.println(nome + " " + pontos);
  		}
	}
	
	public static class Jogador {
		
		String nome;
		int pontuacao;
		
		public Jogador(String nome, int pontuacao) {
			this.nome = nome;
			this.pontuacao = pontuacao;
		}
		
	}
	
	
	public static class ConsoleInputReadTask implements Callable<String> {
		//ler o que est√° sendo digitado, imita o scanner
		public String call() throws IOException {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		    // System.out.println("ConsoleInputReadTask run() called.");
		    String input;
		    do {
			    // System.out.println("Please type something: ");
			    try {
			    	// wait until we have data to complete a readLine()
			        while (!br.ready()) {
			            Thread.sleep(200);
			        }
			        input = br.readLine();
			    } catch (InterruptedException e) {
			        // System.out.println("ConsoleInputReadTask() cancelled");
			        return null;
			    }
		    } while ("".equals(input));
		    // System.out.println("Thank You for providing input!");
		    return input;
		}
	}
 //limite de tempo, ele ativa o  consoleImputReadTask, mas quando der o limite de tempo ele interrompe
	public static class ConsoleInput {
		
	    private final int tries;
	    private final int timeout;
	    private final TimeUnit unit;

	    public ConsoleInput(int tries, int timeout, TimeUnit unit) {
	    	this.tries = tries;
	    	this.timeout = timeout;
	    	this.unit = unit;
	    }

	    public String readLine() throws InterruptedException {
	    	ExecutorService ex = Executors.newSingleThreadExecutor();
	    	String input = null;
	    	try {
		        // start working
		        for (int i = 0; i < tries; i++) {
		        	// System.out.println(String.valueOf(i + 1) + ". loop");
		        	Future<String> result = ex.submit(new ConsoleInputReadTask());
		        	try {
		        		input = result.get(timeout, unit);
		        		break;
			        } catch (ExecutionException e) {
			        	e.getCause().printStackTrace();
			        } catch (TimeoutException e) {
				        // System.out.println("Cancelling reading task");
				        result.cancel(true);
				        // System.out.println("\nThread cancelled. input is null");
			        }
			    }
		    } finally {
		    	ex.shutdownNow();
		    }
		    return input;
		}
	}

}
